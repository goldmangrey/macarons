// src/pages/Moderator/Dashboard.jsx
import { useState, useEffect } from "react";
import { db, storage } from "../../firebase";

import {
    getDoc,
    query,
    collection,
    addDoc,
    getDocs,
    updateDoc,
    doc,
    deleteDoc,
} from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL, deleteObject } from "firebase/storage";
import PasswordChanger from "../../components/PasswordChanger";

// ===== FIXED BOX TEMPLATES (editable only by dev) =====
// ===== FIXED BOX TEMPLATES tuned for your PNGs =====
// slotMap: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ inner (0..1)
const BOX_TEMPLATES = {
    // –ö–í–ê–î–†–ê–¢ 12 —à—Ç ‚Äî —Å–µ—Ç–∫–∞ 3√ó4
    rect12_square: {
        label: "–ö–≤–∞–¥—Ä–∞—Ç ‚Ä¢ 12 (3√ó4)",
        shape: "rect",
        capacity: 12,
        // —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ PNG (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ¬´–ª–æ–∂–µ–º–µ–Ω—Ç¬ª)
        inner: { x: 0.125, y: 0.125, w: 0.75, h: 0.75 },
        // —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞ –∫–∞–∫ % —à–∏—Ä–∏–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ–¥ —Ç–≤–æ–π 768√ó768)
        slotSize: 16,
        // 3 —Ä—è–¥–∞ √ó 4 –∫–æ–ª–æ–Ω–∫–∏ (–ø–æ —Ä—è–¥–∞–º —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑, —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
        slotMap: [
            { x: 0.20, y: 0.22 }, { x: 0.40, y: 0.22 }, { x: 0.60, y: 0.22 }, { x: 0.80, y: 0.22 },
            { x: 0.20, y: 0.50 }, { x: 0.40, y: 0.50 }, { x: 0.60, y: 0.50 }, { x: 0.80, y: 0.50 },
            { x: 0.20, y: 0.78 }, { x: 0.40, y: 0.78 }, { x: 0.60, y: 0.78 }, { x: 0.80, y: 0.78 },
        ],
        // –ø–æ—Ä—è–¥–æ–∫ (–ø–æ –∏–Ω–¥–µ–∫—Å–∞–º slotMap), —á—Ç–æ–±—ã –±–∏–ª–æ—Å—å —Å –∑–∞–ø–æ–ª–Ω—è–ª–∫–æ–π
        order: [0,1,2,3,4,5,6,7,8,9,10,11],
    },

    // –í–´–°–û–ö–ò–ô –ü–†–Ø–ú–û–£–ì–û–õ–¨–ù–ò–ö 6 —à—Ç ‚Äî –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü 1√ó6 –ø–æ —Ü–µ–Ω—Ç—Ä—É, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    rect6_tall: {
        label: "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –≤—ã—Å–æ–∫–∞—è ‚Ä¢ 6 (1√ó6)",
        shape: "rect",
        capacity: 6,
        // –ø–æ–¥ PNG 768√ó1152: —É–∑–∫–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞
        inner: { x: 0.36, y: 0.11, w: 0.28, h: 0.78 },
        slotSize: 20, // —à–∏—Ä–∏–Ω–∞ –º–∞–∫–∞—Ä–æ–Ω—Å–∞ ‚âà —à–∏—Ä–∏–Ω–µ ¬´–ª–æ–∂–µ–º–µ–Ω—Ç–∞¬ª
        // x = —Ü–µ–Ω—Ç—Ä, y —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
        slotMap: [
            { x: 0.50, y: 0.15 },
            { x: 0.50, y: 0.28 },
            { x: 0.50, y: 0.41 },
            { x: 0.50, y: 0.54 },
            { x: 0.50, y: 0.67 },
            { x: 0.50, y: 0.80 },
        ],
        order: [0,1,2,3,4,5], // —Å—Ç—Ä–æ–≥–æ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    },

    // –ö–†–£–ì 12 —à—Ç ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª—å—Ü–æ, —Å—Ç–∞—Ä—Ç —Å–≤–µ—Ä—Ö—É, –ø–æ —á–∞—Å–æ–≤–æ–π
    round9_ring: {
        label: "–ö—Ä—É–≥ ‚Ä¢ 9 (–∫–æ–ª—å—Ü–æ)",
        shape: "round",
        capacity: 9,
        inner: { x: 0.18, y: 0.18, w: 0.64, h: 0.64 }, // —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–¥–∏—É—Å (–±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É)
        slotSize: 18,
        // 9 —Ç–æ—á–µ–∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–µ 40¬∞)
        slotMap: Array.from({ length: 9 }, (_, i) => {
            const angle = (i / 9) * 2 * Math.PI - Math.PI / 2; // —Å—Ç–∞—Ä—Ç —Å–≤–µ—Ä—Ö—É
            return {
                x: 0.5 + 0.38 * Math.cos(angle), // —Ä–∞–¥–∏—É—Å —É–º–µ–Ω—å—à–µ–Ω —Å 0.45 ‚Üí 0.38
                y: 0.5 + 0.38 * Math.sin(angle),
            };
        }),
        order: [0,1,2,3,4,5,6,7,8],
    },

};


// –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–ª—é—á —à–∞–±–ª–æ–Ω–∞ –ø–æ shape+capacity (–µ—Å–ª–∏ –≤ –∫–æ—Ä–æ–±–∫–µ –Ω–µ—Ç templateKey)
const resolveTemplateKey = (box) => {
    if (box.templateKey && BOX_TEMPLATES[box.templateKey]) return box.templateKey;
    const found = Object.entries(BOX_TEMPLATES).find(
        ([, t]) => t.shape === box.shape && t.capacity === Number(box.capacity)
    );
    return found ? found[0] : null;
};

// –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—è –∫–æ—Ä–æ–±–∫–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
const buildPayloadFromTemplate = (tpl, box) => ({
    name: box?.name || tpl.label,
    shape: tpl.shape,
    capacity: tpl.capacity,
    price: Number(box?.price ?? 0),
    imageUrl: box?.imageUrl || "",
    active: typeof box?.active === "boolean" ? box.active : true,
    slotMap: tpl.slotMap,
    inner: tpl.inner || { x: 0, y: 0, w: 1, h: 1 },
    slotSize: tpl.slotSize || null,
    order: Array.isArray(tpl.order) ? tpl.order : [],
    templateKey: box?.templateKey || Object.keys(BOX_TEMPLATES).find((k) => BOX_TEMPLATES[k] === tpl),
});

export default function Dashboard() {
    const [tab, setTab] = useState("boxes");

    // ------------------- BOXES -------------------
    const [boxes, setBoxes] = useState([]);
// –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
    const DEFAULT_TPL_KEY = "rect12_square";
    const DEFAULT_TPL = BOX_TEMPLATES[DEFAULT_TPL_KEY];

    const [newBox, setNewBox] = useState({
        templateKey: DEFAULT_TPL_KEY,
        name: "",
        shape: DEFAULT_TPL.shape,
        capacity: DEFAULT_TPL.capacity,
        price: 0,
        imageUrl: "",
    });

    const [file, setFile] = useState(null);
    const [editBoxId, setEditBoxId] = useState(null);

    const loadBoxes = async () => {
        const snap = await getDocs(collection(db, "boxes"));
        setBoxes(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    };

    useEffect(() => {
        loadBoxes();
    }, []);

    // üîπ –≤–Ω—É—Ç—Ä–∏ Dashboard.jsx
    const addOrUpdateBox = async () => {
        try {
            // 1) –±–µ—Ä—ë–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
            const tpl = BOX_TEMPLATES[newBox.templateKey];
            if (!tpl) {
                alert("–ù–µ –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –∫–æ—Ä–æ–±–∫–∏");
                return;
            }

            // 2) –∑–∞–≥—Ä—É–∑–∫–∞ PNG (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª)
            let imageUrl = newBox.imageUrl || "";
            if (file) {
                const storageRef = ref(storage, `boxes/${Date.now()}-${file.name}`);
                await uploadBytes(storageRef, file);
                imageUrl = await getDownloadURL(storageRef);
            }

            // 3) —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏: shape/capacity/slotMap ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞
            const payload = {
                name: newBox.name || tpl.label,
                shape: tpl.shape,
                capacity: tpl.capacity,
                price: Number(newBox.price) || 0,
                imageUrl,
                active: true,
                slotMap: tpl.slotMap,
                inner: tpl.inner || { x: 0, y: 0, w: 1, h: 1 },
                slotSize: tpl.slotSize || null,
                order: Array.isArray(tpl.order) ? tpl.order : [],
                templateKey: newBox.templateKey, // ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ
            };





            if (editBoxId) {
                await updateDoc(doc(db, "boxes", editBoxId), payload);
                alert("–ö–æ—Ä–æ–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
            } else {
                await addDoc(collection(db, "boxes"), payload);
                alert("–ö–æ—Ä–æ–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
            }

            // 4) —Å–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
            setNewBox({
                templateKey: "rect6",
                name: "",
                shape: BOX_TEMPLATES["rect6"].shape,
                capacity: BOX_TEMPLATES["rect6"].capacity,
                price: 0,
                imageUrl: "",
            });
            setFile(null);
            setEditBoxId(null);
            loadBoxes();
        } catch (e) {
            console.error(e);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—Ä–æ–±–∫–∏");
        }
    };



    const editBox = (box) => {
        const key = box.templateKey || resolveTemplateKey(box) || DEFAULT_TPL_KEY;
        setEditBoxId(box.id);
        setNewBox({
            templateKey: key,
            name: box.name || "",
            shape: BOX_TEMPLATES[key].shape,
            capacity: BOX_TEMPLATES[key].capacity,
            price: Number(box.price) || 0,
            imageUrl: box.imageUrl || "",
        });
    };





    const deleteBox = async (box) => {
        if (!window.confirm("–£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É?")) return;
        await deleteDoc(doc(db, "boxes", box.id));
        if (box.imageUrl) {
            try {
                const imgRef = ref(storage, box.imageUrl);
                await deleteObject(imgRef);
            } catch (e) {
                console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Storage", e);
            }
        }
        loadBoxes();
    };

    // ------------------- MACARONS -------------------
    const [macarons, setMacarons] = useState([]);
    const [newMac, setNewMac] = useState({ name: "", colorHex: "#ffffff", price: 0 });
    const [macFile, setMacFile] = useState(null);
    const [editMacId, setEditMacId] = useState(null);

    const loadMacs = async () => {
        const snap = await getDocs(collection(db, "macarons"));
        setMacarons(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    };

    useEffect(() => {
        loadMacs();
    }, []);

    const addOrUpdateMacaron = async () => {
        let imageUrl = "";
        if (macFile) {
            const storageRef = ref(storage, `macarons/${Date.now()}-${macFile.name}`);
            await uploadBytes(storageRef, macFile);
            imageUrl = await getDownloadURL(storageRef);
        }

        if (editMacId) {
            const refDoc = doc(db, "macarons", editMacId);
            await updateDoc(refDoc, {
                ...newMac,
                ...(imageUrl && { imageUrl }),
            });
            alert("–ú–∞–∫–∞—Ä–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω");
        } else {
            await addDoc(collection(db, "macarons"), {
                ...newMac,
                imageUrl,
                inStock: true,
                popular: false,
            });
            alert("–ú–∞–∫–∞—Ä–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω");
        }

        setNewMac({ name: "", colorHex: "#ffffff", price: 0 });
        setMacFile(null);
        setEditMacId(null);
        loadMacs();
    };

    const editMac = (mac) => {
        setEditMacId(mac.id);
        setNewMac({
            name: mac.name,
            colorHex: mac.colorHex,
            price: mac.price,
            imageUrl: mac.imageUrl || "",
        });
    };


    const deleteMac = async (mac) => {
        if (!window.confirm("–£–¥–∞–ª–∏—Ç—å –º–∞–∫–∞—Ä–æ–Ω?")) return;
        await deleteDoc(doc(db, "macarons", mac.id));
        if (mac.imageUrl) {
            try {
                const imgRef = ref(storage, mac.imageUrl);
                await deleteObject(imgRef);
            } catch (e) {
                console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Storage", e);
            }
        }
        loadMacs();
    };
    const [oldPass, setOldPass] = useState("");
    const [newPass, setNewPass] = useState("");

    const changePassword = async () => {
        const ref = doc(db, "config", "moderator");
        const snap = await getDoc(ref);
        if (!snap.exists()) {
            alert("–î–æ–∫—É–º–µ–Ω—Ç config/moderator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        const current = snap.data().password;
        if (current !== oldPass) {
            alert("–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π");
            return;
        }
        await updateDoc(ref, {
            password: newPass,
            updatedAt: new Date().toISOString(),
        });
        alert("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
        setOldPass("");
        setNewPass("");
    };
    // ------------------- RENDER -------------------
    return (
        <div className="p-6">
            <h2 className="text-2xl font-bold mb-4">–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</h2>

            <div className="flex gap-4">
                {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ */}
                <div className="flex flex-col gap-2">
                    <button
                        className={`px-4 py-2 rounded ${tab === "boxes" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
                        onClick={() => setTab("boxes")}
                    >
                        –ö–æ—Ä–æ–±–∫–∏
                    </button>
                    <button
                        className={`px-4 py-2 rounded ${tab === "macarons" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
                        onClick={() => setTab("macarons")}
                    >
                        –ú–∞–∫–∞—Ä–æ–Ω—Å
                    </button>
                    <button
                        className={`px-4 py-2 rounded ${tab === "password" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
                        onClick={() => setTab("password")}
                    >
                        –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                    </button>

                </div>

                {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
                <div className="flex-1">
                    {tab === "boxes" && (
                        <div>
                            <h3 className="text-xl font-semibold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∞–º–∏</h3>

                            {/* –°–µ—Ä–≤–∏—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ—Ä–æ–±–æ–∫ */}
                            <div className="flex items-center gap-2 mb-3">
                                <button
                                    onClick={async () => {
                                        // –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –í–°–ï –∫–æ—Ä–æ–±–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
                                        const snap = await getDocs(query(collection(db, "boxes")));
                                        let ok = 0, skip = 0, miss = 0;
                                        for (const d of snap.docs) {
                                            const box = { id: d.id, ...d.data() };
                                            const key = resolveTemplateKey(box);
                                            if (!key) { miss++; continue; }
                                            const tpl = BOX_TEMPLATES[key];
                                            if (!tpl) { miss++; continue; }
                                            const payload = buildPayloadFromTemplate(tpl, box);
                                            await updateDoc(doc(db, "boxes", box.id), payload);
                                            ok++;
                                        }
                                        alert(`–ì–æ—Ç–æ–≤–æ!\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${ok}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞): ${miss}\n–û—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${skip}`);
                                        loadBoxes && loadBoxes();
                                    }}
                                    className="px-3 py-2 rounded bg-blue-600 text-white"
                                >
                                    –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ —à–∞–±–ª–æ–Ω–∞–º
                                </button>

                                <button
                                    onClick={async () => {
                                        // –¢–æ–ª—å–∫–æ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏
                                        if (!editBoxId) { alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"); return; }
                                        const ref = doc(db, "boxes", editBoxId);
                                        const key = newBox?.templateKey;
                                        const tpl = key ? BOX_TEMPLATES[key] : null;
                                        if (!tpl) { alert("–®–∞–±–ª–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"); return; }
                                        const payload = buildPayloadFromTemplate(tpl, { ...newBox, id: editBoxId });
                                        await updateDoc(ref, payload);
                                        alert("–ü–∞—Ç—Ç–µ—Ä–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏");
                                        loadBoxes && loadBoxes();
                                    }}
                                    className="px-3 py-2 rounded bg-slate-600 text-white"
                                >
                                    –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é
                                </button>
                            </div>

                            {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–æ–±–∫–∏ */}
                            <div className="mb-6">
                                <select
                                    className="border p-2 w-full mb-3"
                                    value={newBox.templateKey}
                                    onChange={(e) => {
                                        const key = e.target.value;
                                        const tpl = BOX_TEMPLATES[key];
                                        setNewBox((prev) => ({
                                            ...prev,
                                            templateKey: key,
                                            shape: tpl.shape,
                                            capacity: tpl.capacity,
                                        }));
                                    }}
                                >
                                    {Object.entries(BOX_TEMPLATES).map(([key, tpl]) => (
                                        <option key={key} value={key}>{tpl.label}</option>
                                    ))}
                                </select>

                                <input
                                    type="text"
                                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏"
                                    className="border p-2 w-full mb-3"
                                    value={newBox.name}
                                    onChange={(e) => setNewBox({ ...newBox, name: e.target.value })}
                                />
                                <input
                                    type="number"
                                    placeholder="–¶–µ–Ω–∞"
                                    className="border p-2 w-full mb-3"
                                    value={newBox.price}
                                    onChange={(e) => setNewBox({ ...newBox, price: e.target.value })}
                                />
                                {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Firebase */}
                                <input
                                    type="file"
                                    accept="image/*"
                                    className="mb-3"
                                    onChange={async (e) => {
                                        const file = e.target.files[0];
                                        if (!file) return;
                                        const storageRef = ref(storage, `boxes/${Date.now()}-${file.name}`);
                                        await uploadBytes(storageRef, file);
                                        const url = await getDownloadURL(storageRef);
                                        setNewBox((prev) => ({ ...prev, imageUrl: url }));
                                    }}
                                />

                                {/* –ü—Ä–µ–≤—å—é + –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ä—É—á–Ω—É—é –≤—Å—Ç–∞–≤–∏—Ç—å URL */}
                                <input
                                    type="text"
                                    placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                                    className="border p-2 w-full mb-3"
                                    value={newBox.imageUrl}
                                    onChange={(e) => setNewBox({ ...newBox, imageUrl: e.target.value })}
                                />

                                {newBox.imageUrl && (
                                    <img
                                        src={newBox.imageUrl}
                                        alt="preview"
                                        className="h-24 object-contain mb-3"
                                    />
                                )}


                                <div className="flex gap-2">
                                    <button
                                        onClick={addOrUpdateBox}
                                        className="px-4 py-2 bg-green-600 text-white rounded"
                                    >
                                        {editBoxId ? "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–æ–±–∫—É" : "–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ–±–∫—É"}
                                    </button>
                                    {editBoxId && (
                                        <button
                                            onClick={() => { setEditBoxId(null); setNewBox({ templateKey: "rect12_square", name: "", price: "", imageUrl: "" }); }}
                                            className="px-4 py-2 bg-gray-400 text-white rounded"
                                        >
                                            –û—Ç–º–µ–Ω–∞
                                        </button>
                                    )}
                                </div>
                            </div>

                            {/* –°–ø–∏—Å–æ–∫ –∫–æ—Ä–æ–±–æ–∫ */}
                            <div className="grid grid-cols-2 gap-4">
                                {boxes.map((box) => (
                                    <div key={box.id} className="border p-3 rounded shadow">
                                        <h4 className="font-semibold">{box.name}</h4>
                                        <p>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {box.capacity}</p>
                                        <p>–¶–µ–Ω–∞: {box.price} ‚Ç∏</p>
                                        {box.imageUrl && (
                                            <img src={box.imageUrl} alt={box.name} className="h-24 object-contain" />
                                        )}
                                        <div className="flex gap-2 mt-2">
                                            <button
                                                onClick={() => editBox(box)}
                                                className="px-3 py-1 bg-yellow-500 text-white rounded"
                                            >
                                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                            </button>
                                            <button
                                                onClick={() => deleteBox(box.id)}
                                                className="px-3 py-1 bg-red-500 text-white rounded"
                                            >
                                                –£–¥–∞–ª–∏—Ç—å
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {tab === "macarons" && (
                        <div>
                            <h3 className="text-xl font-semibold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–∫–∞—Ä–æ–Ω—Å–∞–º–∏</h3>

                            {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–∫–∞—Ä–æ–Ω—Å–æ–≤ */}
                            <div className="mb-6">
                                <input
                                    type="text"
                                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                                    className="border p-2 w-full mb-3"
                                    value={newMac.name}
                                    onChange={(e) => setNewMac({ ...newMac, name: e.target.value })}
                                />
                                <input
                                    type="color"
                                    className="border p-2 w-full mb-3"
                                    value={newMac.colorHex}
                                    onChange={(e) => setNewMac({ ...newMac, colorHex: e.target.value })}
                                />
                                <input
                                    type="number"
                                    placeholder="–¶–µ–Ω–∞"
                                    className="border p-2 w-full mb-3"
                                    value={newMac.price}
                                    onChange={(e) => setNewMac({ ...newMac, price: e.target.value })}
                                />

                                {/* –ó–∞–≥—Ä—É–∑–∫–∞ PNG –≤ Firebase */}
                                <input
                                    type="file"
                                    accept="image/*"
                                    className="mb-3"
                                    onChange={(e) => setMacFile(e.target.files[0])}
                                />

                                {newMac.imageUrl && (
                                    <img src={newMac.imageUrl} alt="preview" className="h-24 object-contain mb-3" />
                                )}

                                <div className="flex gap-2">
                                    <button
                                        onClick={addOrUpdateMacaron}
                                        className="px-4 py-2 bg-green-600 text-white rounded"
                                    >
                                        {editMacId ? "–û–±–Ω–æ–≤–∏—Ç—å –º–∞–∫–∞—Ä–æ–Ω" : "–î–æ–±–∞–≤–∏—Ç—å –º–∞–∫–∞—Ä–æ–Ω"}
                                    </button>
                                    {editMacId && (
                                        <button
                                            onClick={() => {
                                                setEditMacId(null);
                                                setNewMac({ name: "", colorHex: "#ffffff", price: 0 });
                                                setMacFile(null);
                                            }}
                                            className="px-4 py-2 bg-gray-400 text-white rounded"
                                        >
                                            –û—Ç–º–µ–Ω–∞
                                        </button>
                                    )}
                                </div>
                            </div>

                            {/* –°–ø–∏—Å–æ–∫ –º–∞–∫–∞—Ä–æ–Ω—Å–æ–≤ */}
                            <div className="grid grid-cols-2 gap-4">
                                {macarons.map((mac) => (
                                    <div key={mac.id} className="border p-3 rounded shadow">
                                        <h4 className="font-semibold">{mac.name}</h4>
                                        <p>–¶–µ–Ω–∞: {mac.price} ‚Ç∏</p>
                                        <div className="flex items-center gap-2">
                                            <div
                                                className="w-6 h-6 rounded-full"
                                                style={{ backgroundColor: mac.colorHex }}
                                            ></div>
                                            {/*<span>{mac.colorHex}</span>*/}
                                        </div>
                                        {mac.imageUrl && (
                                            <img src={mac.imageUrl} alt={mac.name} className="h-24 object-contain" />
                                        )}
                                        <div className="flex gap-2 mt-2">
                                            <button
                                                onClick={() => editMac(mac)}
                                                className="px-3 py-1 bg-yellow-500 text-white rounded"
                                            >
                                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                            </button>
                                            <button
                                                onClick={() => deleteMac(mac)}
                                                className="px-3 py-1 bg-red-500 text-white rounded"
                                            >
                                                –£–¥–∞–ª–∏—Ç—å
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}


                    {tab === "orders" && (
                        <div>
                            <h3 className="text-xl font-semibold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</h3>
                            {/* —Ç–≤–æ–π –∫–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ */}
                        </div>
                    )}
                    {tab === "password" && (
                        <div>
                            <h3 className="text-xl font-semibold mb-4">–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</h3>
                            <input
                                type="password"
                                placeholder="–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å"
                                className="border p-2 w-full mb-3"
                                value={oldPass}
                                onChange={(e) => setOldPass(e.target.value)}
                            />
                            <input
                                type="password"
                                placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                                className="border p-2 w-full mb-3"
                                value={newPass}
                                onChange={(e) => setNewPass(e.target.value)}
                            />
                            <button
                                onClick={changePassword}
                                className="px-4 py-2 bg-green-600 text-white rounded"
                            >
                                –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
                            </button>
                        </div>
                    )}

                </div>
            </div>
        </div>
    );

}
